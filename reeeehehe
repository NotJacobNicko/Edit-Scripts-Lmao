local lplr = game:GetService("Players").LocalPlayer
local cam = workspace:FindFirstChildWhichIsA("Camera")
local PlayerModuleMoment = nil
local RespawnDebounce,Flyingmode = false,false
local OriginPos = CFrame.new(0,6,0)
local MainRoot,rootMissing,mainhum = nil,true,nil
local FlyObjs = {}
local ISStudio = game:GetService("RunService"):IsStudio()
FlyObjs["Seperate1"] = nil
FlyObjs["Seperate2"] = nil
FlyObjs["WeldRoot"] = nil

local FlySpeed = 60
local function IsAlive(char)
	if not char then
		return false
	end

	if char:FindFirstChildWhichIsA("Humanoid") and char:FindFirstChildWhichIsA("Humanoid").Health >= 0 then
		return true
	end
	return false
end
function randomstring()
	local e = {}
	for i = 1,math.random(5,50) do
		table.insert(e,utf8.char(math.random(10,100)))
	end
	return table.concat(e)
end



local function Refill()
	if not Flyingmode then
		return
	end
	if not FlyObjs["Seperate2"] or FlyObjs["Seperate2"].Parent ~= workspace then
		pcall(game.Destroy,FlyObjs["Seperate2"])
		FlyObjs["Seperate2"] = Instance.new("Part",workspace)
		FlyObjs["Seperate2"].Name = randomstring()
		FlyObjs["Seperate2"].CFrame = OriginPos
		FlyObjs["Seperate2"].Color = Color3.new(0, 0, 1)
		FlyObjs["Seperate2"].CanCollide = false
		FlyObjs["Seperate2"].Material = Enum.Material.SmoothPlastic
		FlyObjs["Seperate2"].Size = Vector3.new(2, 2, 1)
		FlyObjs["Seperate2"].Transparency = .9
	else
		FlyObjs["Seperate2"].CFrame = OriginPos
	end
	if FlyObjs["Seperate2"] and MainRoot then
		if not FlyObjs["WeldRoot"] or FlyObjs["WeldRoot"].Part0 ~= MainRoot or FlyObjs["WeldRoot"].Part1 ~= FlyObjs["Seperate2"] or FlyObjs["WeldRoot"].Parent ~= FlyObjs["Seperate2"] then
			pcall(game.Destroy,FlyObjs["WeldRoot"])
			FlyObjs["WeldRoot"] = Instance.new("Weld",FlyObjs["Seperate2"])
			FlyObjs["WeldRoot"].Name = randomstring()
			FlyObjs["WeldRoot"].Part0 = MainRoot
			FlyObjs["WeldRoot"].Part1 = FlyObjs["Seperate2"]
		else
			FlyObjs["WeldRoot"].Name = randomstring()
		end
	end
	
	
	if not FlyObjs["Seperate1"] or FlyObjs["Seperate1"].Parent ~= workspace then
		pcall(game.Destroy,FlyObjs["Seperate1"])
		FlyObjs["Seperate1"] = Instance.new("Part",workspace)
		FlyObjs["Seperate1"].Name = randomstring()
		FlyObjs["Seperate1"].CFrame = OriginPos
		FlyObjs["Seperate1"].Anchored = true
		FlyObjs["Seperate1"].Color = Color3.new(1, 0, 0)
		FlyObjs["Seperate1"].CanCollide = false
		FlyObjs["Seperate1"].Material = Enum.Material.SmoothPlastic
		FlyObjs["Seperate1"].Size = Vector3.new(2, 2, 1)
		FlyObjs["Seperate1"].Transparency = .9
	else
		OriginPos = FlyObjs["Seperate1"].CFrame
		FlyObjs["Seperate1"].CFrame = CFrame.new(FlyObjs["Seperate1"].CFrame.X,FlyObjs["Seperate1"].CFrame.Y,FlyObjs["Seperate1"].CFrame.Z)*cam.CFrame.Rotation
	end
end
workspace.DescendantRemoving:Connect(Refill)


task.spawn(function()
	for i,Con in pairs({workspace:GetPropertyChangedSignal("DistributedGameTime"),game:GetService("RunService").RenderStepped,game:GetService("RunService").Heartbeat}) do
		Con:Connect(function()
			task.spawn(Refill)

			if not lplr.Character or not lplr.Character:FindFirstChildWhichIsA("Humanoid") then
				return
			end
			local Humanoid = lplr.Character:FindFirstChildWhichIsA("Humanoid")
			local RootPart = lplr.Character:FindFirstChild("Torso") or lplr.Character:FindFirstChild("HumanoidRootPart")
			PlayerModuleMoment = lplr:FindFirstChildWhichIsA("PlayerScripts"):FindFirstChild("PlayerModule")
			mainhum = Humanoid
			MainRoot = RootPart
			
			if Flyingmode then
				if not MainRoot or not MainRoot.Parent then
					lplr.Character:PivotTo(OriginPos)
				end
				
				local VELopart = FlyObjs["Seperate1"]
				if require(PlayerModuleMoment:WaitForChild("ControlModule")):GetMoveVector().X > 0 or require(PlayerModuleMoment:WaitForChild("ControlModule")):GetMoveVector().X < 0 then
					VELopart.CFrame = VELopart.CFrame + (cam.CFrame.RightVector * (require(PlayerModuleMoment:WaitForChild("ControlModule")):GetMoveVector().X * FlySpeed))/100

				end
				if require(PlayerModuleMoment:WaitForChild("ControlModule")):GetMoveVector().Z > 0 or require(PlayerModuleMoment:WaitForChild("ControlModule")):GetMoveVector().Z < 0 then
					VELopart.CFrame = VELopart.CFrame - (cam.CFrame.LookVector * (require(PlayerModuleMoment:WaitForChild("ControlModule")):GetMoveVector().Z * FlySpeed))/100
				end
				
						
				
				if IsAlive(lplr.Character) then
					Humanoid.PlatformStand = false
					if Humanoid.Sit then
						Humanoid.PlatformStand = false
						cam.CameraSubject = Humanoid
						cam.CameraType = Enum.CameraType.Track
					else
						Humanoid.PlatformStand = true
						cam.CameraType = Enum.CameraType.Custom
					end
					
					MainRoot.AssemblyLinearVelocity = Vector3.new(0,0,0)
					MainRoot.AssemblyAngularVelocity = Vector3.new(0,0,0)
				end
			end
			
		end)
	end
end)





local GUI = Instance.new("ScreenGui")
if not ISStudio then
	GUI.Parent = game:GetService("CoreGui")
else
	GUI.Parent = lplr.PlayerGui
end
GUI.Name = randomstring()
GUI.ResetOnSpawn = false
GUI.IgnoreGuiInset = true
local button1 = Instance.new("TextButton",GUI)
button1.Name = randomstring()
button1.Size = UDim2.new(0,60,0,20)
button1.BackgroundColor3 = Color3.new(1, 0, 0)
button1.Position = UDim2.new(0.467, 0,0.728, 0)
button1.Text = "Fly"
button1.Visible = true
local textbox = Instance.new("TextBox",GUI)
textbox.Size = UDim2.new(0,75,0,32)
textbox.BackgroundColor3 = Color3.new(0.133333, 1, 0)
textbox.Position = UDim2.new(0.46, 0,0.77, 0)
textbox.Visible = true
textbox.Text = ""
textbox.PlaceholderText = "Speed:"..FlySpeed
textbox.PlaceholderColor3 = Color3.new(0, 0, 0)
textbox:GetPropertyChangedSignal("Text"):Connect(function()
	local num = tonumber(textbox.Text)
	if num ~= nil and 10 <= num then
		textbox.PlaceholderText = "Speed:"..num
		FlySpeed = num
	end
end)
button1.MouseButton1Click:Connect(function()
	if not Flyingmode then
		button1.BackgroundColor3 = Color3.new(0.14902, 1, 0)
		Flyingmode = true
		
		if MainRoot then
			OriginPos = MainRoot.CFrame 
		end
	else
		button1.BackgroundColor3 = Color3.new(1, 0, 0)
		Flyingmode = false
		
		cam.CameraType = Enum.CameraType.Custom
		
		if MainRoot then
			MainRoot.AssemblyLinearVelocity = Vector3.new(0,0,0)
			MainRoot.AssemblyAngularVelocity = Vector3.new(0,0,0)
			OriginPos = MainRoot.CFrame 
		end
		
		if FlyObjs["WeldRoot"] then
			FlyObjs["WeldRoot"]:remove()
		end
		if mainhum then
			cam.CameraSubject = mainhum
			mainhum.PlatformStand = false
		end
		for i,Obj in FlyObjs do
			if Obj then
				Obj:remove()
			end
		end
	end
end)
